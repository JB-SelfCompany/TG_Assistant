"""Currency handlers"""

import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext

from keyboards.menu import get_currency_menu, get_cancel_button
from services.currency_service import CurrencyService
from states.user_states import CurrencyStates

router = Router(name="currency")
logger = logging.getLogger(__name__)

currency_service = CurrencyService()

@router.callback_query(F.data == "menu:currency")
async def show_currency_menu(
    callback: CallbackQuery,
    state: FSMContext
) -> None:
    """Show currency rates immediately (UPDATED)"""
    await state.clear()
    
    # Immediately show currency rates instead of menu
    await show_currency_rates(callback)


async def show_currency_rates(callback: CallbackQuery) -> None:
    """Show currency rates"""
    rates = await currency_service.get_rates()
    
    if not rates:
        await callback.message.edit_text(
            text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–∞—Ö –≤–∞–ª—é—Ç.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_currency_menu()
        )
        await callback.answer()
        return
    
    text = currency_service.format_rates(rates)
    
    await callback.message.edit_text(
        text=text,
        reply_markup=get_currency_menu()
    )
    await callback.answer()

@router.callback_query(F.data == "currency:convert")
async def start_conversion(callback: CallbackQuery, state: FSMContext) -> None:
    """Start currency conversion"""
    await state.set_state(CurrencyStates.waiting_for_conversion)
    
    await callback.message.edit_text(
        text=(
            "üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "`–°–£–ú–ú–ê –ò–ó_–í–ê–õ–Æ–¢–´ –í_–í–ê–õ–Æ–¢–£`\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ `100 USD RUB`\n"
            "‚Ä¢ `50 EUR USD`\n"
            "‚Ä¢ `1000 RUB EUR`\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã: USD, EUR, RUB, CNY, GBP, JPY, CHF, UAH –∏ –¥—Ä—É–≥–∏–µ"
        ),
        reply_markup=get_cancel_button()
    )
    await callback.answer()


@router.message(CurrencyStates.waiting_for_conversion)
async def process_currency_conversion(message: Message, state: FSMContext) -> None:
    """Process currency conversion"""
    try:
        parts = message.text.strip().upper().split()
        
        if len(parts) != 3:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>–°–£–ú–ú–ê –ò–ó_–í–ê–õ–Æ–¢–´ –í_–í–ê–õ–Æ–¢–£</code>\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>100 USD RUB</code>"
            )
            return
        
        amount_str, from_curr, to_curr = parts
        amount = float(amount_str.replace(",", "."))
        
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è")
            return
        
        # Convert
        result = await currency_service.convert(amount, from_curr, to_curr)
        
        if result is None:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–æ–≤ –≤–∞–ª—é—Ç."
            )
            return
        
        await state.clear()
        
        # Get emoji for currencies
        emoji_map = {
            "USD": "üíµ", "EUR": "üí∂", "RUB": "‚ÇΩ",
            "CNY": "üá®üá≥", "GBP": "üí∑", "JPY": "üí¥",
            "CHF": "üá®üá≠", "UAH": "üá∫üá¶"
        }
        
        from_emoji = emoji_map.get(from_curr, "üí∞")
        to_emoji = emoji_map.get(to_curr, "üí∞")
        
        await message.answer(
            text=(
                "‚úÖ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏</b>\n\n"
                f"{from_emoji} {amount:.2f} {from_curr} =\n"
                f"{to_emoji} {result:.2f} {to_curr}"
            ),
            reply_markup=get_currency_menu()
        )
        
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>100 USD RUB</code>"
        )
    except Exception as e:
        logger.error(f"Conversion error: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏",
            reply_markup=get_currency_menu()
        )
