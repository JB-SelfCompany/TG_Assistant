"""Settings handlers"""
import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database.models import UserSettingsRepository
from keyboards.menu import get_cancel_button
from states.user_states import SettingsStates
from services.weather_service import WeatherService

router = Router(name="settings")
logger = logging.getLogger(__name__)

weather_service = WeatherService()


def get_settings_menu(city: str) -> InlineKeyboardBuilder:
    """Settings menu keyboard"""
    builder = InlineKeyboardBuilder()
    
    builder.button(text="üìç –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="settings:change_city")
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:main")
    
    builder.adjust(1)
    return builder


@router.callback_query(F.data == "menu:settings")
async def show_settings_menu(
    callback: CallbackQuery,
    settings_repo: UserSettingsRepository
) -> None:
    """Show settings menu"""
    # Get current user settings
    user_settings = await settings_repo.get_settings(callback.from_user.id)
    
    city = user_settings["city"] if user_settings and user_settings["city"] else "–ù–µ –∑–∞–¥–∞–Ω"
    
    text = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        f"üìç <b>–¢–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥:</b> {city}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
    )
    
    await callback.message.edit_text(
        text=text,
        reply_markup=get_settings_menu(city).as_markup()
    )
    await callback.answer()


@router.callback_query(F.data == "settings:change_city")
async def settings_change_city(
    callback: CallbackQuery,
    state: FSMContext
) -> None:
    """Start city change process"""
    await state.set_state(SettingsStates.waiting_for_city)
    
    # Save message ID to edit it later
    await state.update_data(message_id=callback.message.message_id)
    
    await callback.message.edit_text(
        text=(
            "üìç <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ:\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ <code>Moscow</code>\n"
            "‚Ä¢ <code>London</code>\n"
            "‚Ä¢ <code>New York</code>"
        ),
        reply_markup=get_cancel_button()
    )
    await callback.answer()


@router.message(SettingsStates.waiting_for_city)
async def process_city_change(
    message: Message,
    state: FSMContext,
    settings_repo: UserSettingsRepository
) -> None:
    """Process city change"""
    city = message.text.strip()
    
    # Delete user's message
    await message.delete()
    
    data = await state.get_data()
    
    # Validate city by trying to get weather
    weather_data = await weather_service.get_current_weather(city)
    
    if not weather_data:
        try:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=data["message_id"],
                text=(
                    "üìç <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞</b>\n\n"
                    "‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n"
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.\n\n"
                    "–ü—Ä–∏–º–µ—Ä—ã:\n"
                    "‚Ä¢ <code>Moscow</code>\n"
                    "‚Ä¢ <code>London</code>\n"
                    "‚Ä¢ <code>New York</code>"
                ),
                reply_markup=get_cancel_button()
            )
        except:
            pass
        return
    
    # Save city to user settings
    await settings_repo.update_settings(
        user_id=message.from_user.id,
        city=city
    )
    
    await state.clear()
    
    text = (
        f"‚úÖ <b>–ì–æ—Ä–æ–¥ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {city}</b>\n\n"
        f"üå° <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> {weather_data['temperature']}¬∞C\n"
        f"üå§ <b>–ü–æ–≥–æ–¥–∞:</b> {weather_data['description']}\n"
        f"üí® <b>–í–µ—Ç–µ—Ä:</b> {weather_data['wind_speed']} –º/—Å\n"
        f"üíß <b>–í–ª–∞–∂–Ω–æ—Å—Ç—å:</b> {weather_data['humidity']}%"
    )
    
    await message.bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=data["message_id"],
        text=text,
        reply_markup=get_settings_menu(city).as_markup()
    )
    
    logger.info(f"User {message.from_user.id} changed city to {city}")