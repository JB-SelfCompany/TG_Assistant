"""Places handlers"""
import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest
from geopy.geocoders import Nominatim

from database.models import UserSettingsRepository
from keyboards.menu import get_places_menu, get_cancel_button
from services.places_service import places_service
from states.user_states import PlacesStates

router = Router(name="places")
logger = logging.getLogger(__name__)

# Geocoder for address to coordinates
geolocator = Nominatim(user_agent="telegram_bot_places")

RESULTS_PER_PAGE = 10


def get_place_type_keyboard(latitude: float, longitude: float) -> InlineKeyboardBuilder:
    """Generate keyboard for place type selection"""
    builder = InlineKeyboardBuilder()
    
    builder.button(text="üíä –ê–ø—Ç–µ–∫–∏", callback_data=f"places:search:pharmacies:{latitude}:{longitude}")
    builder.button(text="üè• –í–µ—Ç–∞–ø—Ç–µ–∫–∏", callback_data=f"places:search:vet:{latitude}:{longitude}")
    builder.button(text="üõí –ü—Ä–æ–¥—É–∫—Ç—ã", callback_data=f"places:search:shops:{latitude}:{longitude}")
    builder.button(text="üìç –î—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ", callback_data="places:location")
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:main")
    
    builder.adjust(3, 2)
    return builder


def get_places_pagination_keyboard(
    place_type: str,
    latitude: float,
    longitude: float,
    page: int,
    total_pages: int
) -> InlineKeyboardBuilder:
    """Generate pagination keyboard for places list"""
    builder = InlineKeyboardBuilder()
    
    # Navigation buttons
    nav_buttons = []
    
    if page > 0:
        nav_buttons.append(("‚¨ÖÔ∏è", f"places:page:{place_type}:{latitude}:{longitude}:{page - 1}"))
    
    nav_buttons.append((f"üìÑ {page + 1}/{total_pages}", "places:page:current"))
    
    if page < total_pages - 1:
        nav_buttons.append(("‚û°Ô∏è", f"places:page:{place_type}:{latitude}:{longitude}:{page + 1}"))
    
    for text, callback_data in nav_buttons:
        builder.button(text=text, callback_data=callback_data)
    
    # Back buttons
    builder.button(text="üîÑ –î—Ä—É–≥–æ–π —Ç–∏–ø", callback_data=f"places:types:{latitude}:{longitude}")
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"places:types:{latitude}:{longitude}")
    
    builder.adjust(len(nav_buttons), 2)
    return builder


@router.callback_query(F.data == "menu:places")
async def show_places_menu(callback: CallbackQuery, state: FSMContext) -> None:
    """Show places menu"""
    # Check if we have saved location in state
    data = await state.get_data()
    
    if data.get("latitude") and data.get("longitude"):
        # Show place types if location is already set
        latitude = data["latitude"]
        longitude = data["longitude"]
        
        try:
            await callback.message.edit_text(
                text="üìç <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Å—Ç–∞</b>\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏?",
                reply_markup=get_place_type_keyboard(latitude, longitude).as_markup()
            )
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                raise
    else:
        # Ask for location
        try:
            await callback.message.edit_text(
                text=(
                    "üìç <b>–ú–µ—Å—Ç–∞ —Ä—è–¥–æ–º</b>\n\n"
                    "–ù–∞–π–¥–∏—Ç–µ –±–ª–∏–∂–∞–π—à–∏–µ –∞–ø—Ç–µ–∫–∏, –≤–µ—Ç–∞–ø—Ç–µ–∫–∏ –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã.\n\n"
                    "–î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:"
                ),
                reply_markup=get_places_menu()
            )
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                raise
    
    await callback.answer()


@router.callback_query(F.data == "places:location")
async def request_location(callback: CallbackQuery, state: FSMContext) -> None:
    """Request user location"""
    await state.set_state(PlacesStates.waiting_for_location)
    
    # Save message ID to edit it later
    await state.update_data(message_id=callback.message.message_id)
    
    try:
        await callback.message.edit_text(
            text=(
                "üìç <b>–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</b>\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
                "‚Ä¢ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—é (—á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É üìé ‚Üí –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ)\n"
                "‚Ä¢ –ò–ª–∏ –∞–¥—Ä–µ—Å —Ç–µ–∫—Å—Ç–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>–ü—É—à–∫–∏–Ω–∞ 36</code>)"
            ),
            reply_markup=get_cancel_button()
        )
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            raise
    
    await callback.answer()


@router.message(PlacesStates.waiting_for_location, F.location)
async def process_location_coords(
    message: Message,
    state: FSMContext
) -> None:
    """Process location from geolocation"""
    location = message.location
    latitude = location.latitude
    longitude = location.longitude
    
    # Delete user's message
    await message.delete()
    
    data = await state.get_data()
    
    # Save location to state
    await state.update_data(latitude=latitude, longitude=longitude)
    await state.clear()
    
    text = (
        "üìç <b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ</b>\n\n"
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ —Ä—è–¥–æ–º?"
    )
    
    # Edit the original message
    try:
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=data.get("message_id"),
            text=text,
            reply_markup=get_place_type_keyboard(latitude, longitude).as_markup()
        )
    except Exception as e:
        logger.error(f"Error editing message: {e}")


@router.message(PlacesStates.waiting_for_location, F.text)
async def process_location_address(
    message: Message,
    state: FSMContext,
    settings_repo: UserSettingsRepository
) -> None:
    """Process location from text address"""
    address = message.text.strip()
    
    # Delete user's message
    try:
        await message.delete()
    except:
        pass
    
    data = await state.get_data()
    message_id = data.get("message_id")
    
    if not message_id:
        logger.error("No message_id in state")
        return
    
    # Get user's city as base
    user_settings = await settings_repo.get_settings(message.from_user.id)
    base_city = user_settings["city"] if user_settings and user_settings["city"] else "Moscow"
    
    # Geocode address
    full_address = f"{address}, {base_city}, Russia"
    
    try:
        location = geolocator.geocode(full_address, timeout=10)
        
        if not location:
            try:
                await message.bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=message_id,
                    text=(
                        "üìç <b>–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</b>\n\n"
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å.\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å.\n\n"
                        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
                        "‚Ä¢ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—é (—á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É üìé ‚Üí –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ)\n"
                        "‚Ä¢ –ò–ª–∏ –∞–¥—Ä–µ—Å —Ç–µ–∫—Å—Ç–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>–ü—É—à–∫–∏–Ω–∞ 36</code>)"
                    ),
                    reply_markup=get_cancel_button()
                )
            except Exception as e:
                logger.error(f"Error editing message: {e}")
            return
        
        latitude = location.latitude
        longitude = location.longitude
        
        # Save location to state
        await state.update_data(latitude=latitude, longitude=longitude)
        await state.clear()
        
        text = (
            f"üìç <b>–ù–∞–π–¥–µ–Ω–æ:</b> {location.address}\n\n"
            "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ —Ä—è–¥–æ–º?"
        )
        
        # Edit the original message
        try:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=message_id,
                text=text,
                reply_markup=get_place_type_keyboard(latitude, longitude).as_markup()
            )
        except Exception as e:
            logger.error(f"Error editing message: {e}")
        
    except Exception as e:
        logger.error(f"Geocoding error: {e}")
        try:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=message_id,
                text=(
                    "üìç <b>–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</b>\n\n"
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–¥—Ä–µ—Å–∞.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
                    "‚Ä¢ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—é (—á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É üìé ‚Üí –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ)\n"
                    "‚Ä¢ –ò–ª–∏ –∞–¥—Ä–µ—Å —Ç–µ–∫—Å—Ç–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>–ü—É—à–∫–∏–Ω–∞ 36</code>)"
                ),
                reply_markup=get_cancel_button()
            )
        except Exception as edit_error:
            logger.error(f"Error editing message: {edit_error}")


@router.callback_query(F.data.startswith("places:search:"))
async def search_places(callback: CallbackQuery, state: FSMContext) -> None:
    """Search for places"""
    parts = callback.data.split(":")
    place_type = parts[2]
    latitude = float(parts[3])
    longitude = float(parts[4])
    
    # Save location to state if not already saved
    await state.update_data(latitude=latitude, longitude=longitude)
    
    await callback.answer("üîç –ü–æ–∏—Å–∫ –º–µ—Å—Ç...")
    
    # Search places
    results = await places_service.search_places(latitude, longitude, place_type)
    
    if not results:
        try:
            await callback.message.edit_text(
                text="‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ä–∞–¥–∏—É—Å–µ 2 –∫–º.",
                reply_markup=get_place_type_keyboard(latitude, longitude).as_markup()
            )
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                raise
        return
    
    # Show first page
    await show_places_page(callback, place_type, latitude, longitude, results, page=0)


@router.callback_query(F.data.startswith("places:page:"))
async def places_pagination(callback: CallbackQuery, state: FSMContext) -> None:
    """Handle places pagination"""
    parts = callback.data.split(":")
    page_str = parts[-1]
    
    if page_str == "current":
        await callback.answer()
        return
    
    place_type = parts[2]
    latitude = float(parts[3])
    longitude = float(parts[4])
    page = int(parts[5])
    
    # Save location to state
    await state.update_data(latitude=latitude, longitude=longitude)
    
    # Re-search places
    results = await places_service.search_places(latitude, longitude, place_type)
    
    await show_places_page(callback, place_type, latitude, longitude, results, page)


@router.callback_query(F.data.startswith("places:types:"))
async def show_place_types(callback: CallbackQuery, state: FSMContext) -> None:
    """Show place type selection again"""
    parts = callback.data.split(":")
    latitude = float(parts[2])
    longitude = float(parts[3])
    
    # Save location to state
    await state.update_data(latitude=latitude, longitude=longitude)
    
    try:
        await callback.message.edit_text(
            text="üìç <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Å—Ç–∞</b>\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏?",
            reply_markup=get_place_type_keyboard(latitude, longitude).as_markup()
        )
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            raise
    
    await callback.answer()


async def show_places_page(
    callback: CallbackQuery,
    place_type: str,
    latitude: float,
    longitude: float,
    results: list,
    page: int = 0
) -> None:
    """Show places page with pagination"""
    total_places = len(results)
    total_pages = (total_places + RESULTS_PER_PAGE - 1) // RESULTS_PER_PAGE
    
    # Ensure page is within bounds
    page = max(0, min(page, total_pages - 1))
    
    start_idx = page * RESULTS_PER_PAGE
    end_idx = min(start_idx + RESULTS_PER_PAGE, total_places)
    
    page_results = results[start_idx:end_idx]
    
    # Get place type info
    config = places_service.PLACE_TYPES[place_type]
    
    # Build text
    text = f"{config['emoji']} <b>{config['name']}</b> (—Å—Ç—Ä. {page + 1}/{total_pages})\n"
    text += f"<i>–ù–∞–π–¥–µ–Ω–æ: {total_places}</i>\n\n"
    
    for i, place in enumerate(page_results, start=start_idx + 1):
        text += places_service.format_place(place, i) + "\n\n"
    
    # Generate keyboard
    keyboard = get_places_pagination_keyboard(
        place_type, latitude, longitude, page, total_pages
    )
    
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=keyboard.as_markup()
        )
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            raise
    
    await callback.answer()